/*
 * Nwoke Fortune Chiemeziem Assagnment3 - easyStreet
 */

package model;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;

/**
 * This is the human class. It represents the human in the GUI.
 * 
 * @author Nwoke Fortune Chiemeziem (n4tunec@uw.edu)
 * @version winter 2015.
 *
 */
public final class Human extends AbstractVehicle {

    /** This is the additional death time for the human. */
    private static final int HUMAN_ADDIDIONAL_DEAD_TIME = 40;

    /** This is the terrain of the human. */
    private final Terrain myTerrain;

    /**
     * This is the constructor. It initialized my fields.
     * 
     * @param theX This is the X location of the human.
     * @param theY This is the Y location of the human.
     * @param theDirection This is the direction of the human.
     * @param theTerrain This is the terrain of the human.
     */
    public Human(final int theX, final int theY, final Direction theDirection,
                 final Terrain theTerrain) {
        super(theX, theY, theDirection);

        myTerrain = theTerrain;
    }

    /**
     * This method chooses the direction for the human.
     * 
     * @param theNeighbors This is the map containing the directions and their terrain.
     * @return the chosen direction.
     */
    @Override
    public Direction chooseDirection(final Map<Direction, Terrain> theNeighbors) {
        Direction direction = Direction.random();

        final Random rand = new Random();
        // Direction the_new_direction = the_direction;
        final Direction[] allDirectionArray = {direction, direction.left(),
                                                direction.right()};
        
        final List<Direction> validDirections = new ArrayList<Direction>();

        // Create the possible direction array for the truck
        for (int i = 0; i < allDirectionArray.length; i++) {
        
            final Terrain terrain = theNeighbors.get(allDirectionArray[i]);

            if (terrain == myTerrain) {
            // add valid directions to the arraylist.
                validDirections.add(allDirectionArray[i]);
            }
        }
        //if no valid direction, reverse.
        if (validDirections.isEmpty()) {
            direction = direction.reverse();
        } else { //if valid directions, pick one at random
        
            direction = validDirections.get(rand.nextInt(validDirections.size()));
        }

        return direction;
    }

    /**
     * This method returns the death time of the human.
     * 
     * @return the death time of the human.
     */
    @Override
    public int getDeathTime() {
        return super.getDeathTime() + HUMAN_ADDIDIONAL_DEAD_TIME;
    }

    /**
     * This method checks if the human can pass the specified terrain and light.
     * 
     * @param theTerrain The terrain to be checked.
     * @param theLight The light to be checked.
     * @return true of the human can pass, else false.
     */
    @Override
    public boolean canPass(final Terrain theTerrain, final Light theLight) {

        boolean terrain = false;
        if (theTerrain == Terrain.LIGHT) {
            if (myTerrain == Terrain.STREET || myTerrain == Terrain.LIGHT) {
                terrain = true;
            } else {
                terrain = false;
            }

        } else if (theTerrain == Terrain.STREET) {
            if (myTerrain == Terrain.LIGHT || myTerrain == Terrain.STREET) {
                terrain = true;
            } else {
                terrain = false;
            }

        } else if (theTerrain != myTerrain) {

            terrain = false;
        } else {
            terrain = true;
        }
        return terrain;
    }

    /**
     * This methods returns a string representation the human.
     * 
     * @return the name of the vehicle.
     */
    public String toString() {
        return "human";
    }
}
